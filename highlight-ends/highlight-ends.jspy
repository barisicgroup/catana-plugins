# Define functions
def process_residue(res, col):
	rLocPos = get_residue_position(res)
	rWorPos = multiply_matrix_vector(global.compMat, rLocPos)
	global.centers = global.centers.concat(rWorPos)
	global.colors.push(col)
	global.radii.push(4)

def chain_callback(chain):
	len = get_chain_length(chain)
	if len > 0 and (is_protein_chain(chain) or is_nucleic_chain(chain)):
		process_residue(get_residue_at_index(chain, 0), "#00FF00")
		process_residue(get_residue_at_index(chain, len - 1), "#FF0000")

# Define code to be executed
global.centers = []
global.colors = []
global.radii = []
global.compMat = None
opacity = 0.5

if len(args) > 0:
	remove_disposables()
	valMap = args[0]
	selComps = valMap["comp_select"]
	for c of selComps:
		global.compMat = get_component_matrix(c)
		struc = get_structure_from_component(c)
		each_chain(struc, chain_callback)
	if len(selComps) > 0:
		mark_disposable(add_spheres(global.centers, global.colors, global.radii, opacity))
